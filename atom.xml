<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiest.coding.me</id>
    <title>Xie&apos;s Notebook</title>
    <updated>2019-11-08T15:54:10.217Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiest.coding.me"/>
    <link rel="self" href="https://xiest.coding.me/atom.xml"/>
    <subtitle>doing</subtitle>
    <logo>https://xiest.coding.me/images/avatar.png</logo>
    <icon>https://xiest.coding.me/favicon.ico</icon>
    <rights>All rights reserved 2019, Xie&apos;s Notebook</rights>
    <entry>
        <title type="html"><![CDATA[Python表格操作- 筛选及重命名]]></title>
        <id>https://xiest.coding.me/post/python-biao-ge-cao-zuo-shai-xuan-ji-chong-ming-ming</id>
        <link href="https://xiest.coding.me/post/python-biao-ge-cao-zuo-shai-xuan-ji-chong-ming-ming">
        </link>
        <updated>2019-11-07T14:12:07.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="问题">问题</h2>
<p>有一个二维表格，给定一个<em>list</em>筛选表格的列，同时对部分列名进行重命名。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="问题">问题</h2>
<p>有一个二维表格，给定一个<em>list</em>筛选表格的列，同时对部分列名进行重命名。</p>
<!-- more -->
<p><strong>解决方案</strong></p>
<ul>
<li>Python代码直接实现</li>
<li>调用Pandas完成</li>
</ul>
<h2 id="一-ptyhon代码实现">一. Ptyhon代码实现</h2>
<h3 id="问题分析">问题分析：</h3>
<ul>
<li>列筛选：<em>list</em>中包含不同的列名，我们首先需要知道它们在原始表格中的位置，然后通过位置索引逐行从原始表格中获取</li>
<li>重命名：以字典的形式保存重命名关系，如 '{old_name: new_name}'；然后遍历列名进<br>
个替换</li>
</ul>
<h3 id="核心代码">核心代码：</h3>
<pre><code class="language-python"># *colums* 需要的筛选获得的列名；*names* 重命名字典；*header* 原始表格的列名
# 列筛选
header_index_dict = {x: y for y, x in enumerate(header)} # 字典保存每个列名的位置信息
columns_index = [header_index_dict[col] for col in columns] # columns中每列在原始表格中的索引
new_columns = [header[i] for i in columns_index] # 按索引得到目标列
new_line = [line[i] for i in columns_index] # 逐行遍历原始表，获取目标列元素
# 重命名
renamed_columns = [names[col] if col in names else col for col in new_columns]
</code></pre>
<h3 id="代码封装">代码封装：</h3>
<pre><code class="language-python">def filter_rename_table(table_file, columns=[], names={}):
    out = [] # 结果暂时存入列表中，返回后任你处置
    with open(table_file, 'r') as r:
        header = r.readline().strip('\t\r\n').split('\t') # 假定表格以tab分隔
        header_index_dict = {x: y for y, x in enumerate(header)}
        columns_index = [header_index_dict[col] for col in columns]
        new_columns = [header[i] for i in columns_index]
        renamed_columns = [names[col] if col in names else col for col in new_columns]
        out.append(renamed_columns)
        for line in r:
            line = line.strip('\t\r\n').split('\t')
            new_line = [line[i] for i in columns_index]
            out.append(new_line)
        return out
</code></pre>
<h3 id="代码优化">代码优化：</h3>
<ol>
<li>异常处理。可能的异常如columns并非header的真子集，我们需要及时判断以告知调用者</li>
<li>通用性。考虑调用者只想筛选，或只想改名，或原始表没有列名的情况</li>
</ol>
<h2 id="二-pandas调用">二. Pandas调用</h2>
<p>一行代码就能实现上述过程</p>
<pre><code class="language-python">new_df = df[columns].rename(columns=names)
</code></pre>
<h2 id="总结">总结</h2>
<ol>
<li>学习过程中面对不同问题，利用Python原生支持的基础去解决不失为一种绝佳的训练方式</li>
<li>实际应用过程中，考虑到效率问题，我们往往可以利用第三方的扩展来简化我们的工作</li>
<li>丰富我们的代码库，构建自己的第三方扩展。比如上面的代码，经过不同的优化后，我们同样可以通过一行代码来解决我们的问题</li>
</ol>
]]></content>
    </entry>
</feed>